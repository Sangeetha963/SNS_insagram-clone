// 
// Generated by @himenon/openapi-typescript-code-generator v0.19.1
// 
// OpenApi : 3.0.0
// 
// 


import { Schemas } from "./types";
export interface RequestBody$clientAuthCheckSigninMethod {
    "application/json": Schemas.ClientAuthCheckRequestDto;
}
export interface Response$clientAuthCheckSigninMethod$Status$200 {
    "application/json": Schemas.ClientAuthTokenResponseDto;
}
export interface RequestBody$clientAuthSigninWithId {
    "application/json": Schemas.ClientSigninWithPasswordRequestDto;
}
export interface Response$clientAuthSigninWithId$Status$200 {
    "application/json": Schemas.ClientAuthTokenResponseDto;
}
export interface RequestBody$clientAuthRefreshToken {
    "application/json": Schemas.ClientRefreshTokenRequestDto;
}
export interface Response$clientAuthRefreshToken$Status$200 {
    "application/json": Schemas.ClientRefreshTokenResponseDto;
}
export interface Response$clientCustomerGetUser$Status$200 {
    "application/json": Schemas.CustomerEntities;
}
export interface RequestBody$clientCustomerUpdateUser {
    "application/json": Schemas.ClientCustomerUpdateDto;
}
export interface Response$clientCustomerUpdateUser$Status$200 {
    "application/json": Schemas.CustomerEntities;
}
export interface RequestBody$clientCustomerCreateUser {
    "application/json": Schemas.ClientCustomerCreateDto;
}
export interface Response$clientCustomerCreateUser$Status$200 {
    "application/json": Schemas.ClientAuthTokenResponseDto;
}
export interface RequestBody$clientCustomerPostResetPassword {
    "application/json": Schemas.ClientCustomerResetPasswordDto;
}
export interface RequestBody$clientCustomerPutChangePassword {
    "application/json": Schemas.ClientCustomerChangePasswordDto;
}
export interface Response$clientCustomerPutChangePassword$Status$200 {
    "application/json": Schemas.CustomerEntities;
}
export interface Parameter$clientFileGetOneFileDetail {
    uuid: string;
}
export interface Response$clientFileGetOneFileDetail$Status$200 {
    "application/json": Schemas.FileEntities;
}
export interface Parameter$clientMediaGetFile {
    fileName: string;
}
export interface Response$clientMediaGetFile$Status$200 {
    "application/json": Schemas.Buffer;
}
export interface RequestBody$clientFileUploadUpload {
    "multipart/form-data": Schemas.ClientFileUploadDto;
}
export interface Response$clientFileUploadUpload$Status$200 {
    "application/json": Schemas.FileEntities[];
}
export interface Parameter$clientPostGetPostList {
    limit?: number;
    page?: number;
    customerUuid?: string;
}
export interface Response$clientPostGetPostList$Status$200 {
    "application/json": {
        list?: Schemas.PostEntities[];
        count?: number;
    };
}
export interface RequestBody$clientPostPostPost {
    "application/json": Schemas.ClientPostUpdateDto;
}
export interface Response$clientPostPostPost$Status$201 {
    "application/json": Schemas.PostEntities;
}
export interface Parameter$clientPostGetmyPostList {
    customerUuid: string;
    limit?: number;
    page?: number;
}
export interface Response$clientPostGetmyPostList$Status$200 {
    "application/json": {
        list?: Schemas.PostEntities[];
        count?: number;
    };
}
export interface Parameter$clientPostGetPost {
    /** 投稿ID */
    postUuid: string;
}
export interface Response$clientPostGetPost$Status$200 {
    "application/json": Schemas.PostEntities;
}
export interface Parameter$clientPostUpdate {
    /** ポストuuid */
    postUuid: string;
}
export interface RequestBody$clientPostUpdate {
    "application/json": Schemas.ClientPostUpdateDto;
}
export interface Response$clientPostUpdate$Status$200 {
    "application/json": Schemas.PostEntities;
}
export interface Parameter$clientPostDelete {
    /** 削除Id */
    postUuid: string;
}
export interface Parameter$clientFavouriteGetFavouriteList {
    /** 顧客ID */
    customerUuid: string;
    /** limit */
    limit?: number;
    /** page */
    page?: number;
}
export interface Response$clientFavouriteGetFavouriteList$Status$200 {
    "application/json": {
        list?: Schemas.PostEntities[];
        count?: number;
    };
}
export interface Parameter$clientFavouriteLikePost {
    postUuid: string;
}
export interface RequestBody$clientFavouriteLikePost {
    "application/json": Schemas.ClientFavouriteDto;
}
export interface Parameter$clientFavouriteDeleteFav {
    postUuid: string;
}
export interface Parameter$clientFollowFollowList {
    /** ユーザーuuid */
    userUuid: string;
    /** limit */
    limit?: number;
    /** page */
    page?: number;
}
export interface Response$clientFollowFollowList$Status$200 {
    "application/json": {
        list?: Schemas.CustomerEntities[];
        count?: number;
    };
}
export interface Parameter$clientFollowFollowUser {
    userUuid: string;
}
export interface RequestBody$clientFollowFollowUser {
    "application/json": Schemas.ClientFollowUserDto;
}
export interface Parameter$clientFollowUnFollow {
    userUuid: string;
}
export type RequestContentType$clientAuthCheckSigninMethod = keyof RequestBody$clientAuthCheckSigninMethod;
export type ResponseContentType$clientAuthCheckSigninMethod = keyof Response$clientAuthCheckSigninMethod$Status$200;
export interface Params$clientAuthCheckSigninMethod {
    requestBody: RequestBody$clientAuthCheckSigninMethod["application/json"];
}
export type RequestContentType$clientAuthSigninWithId = keyof RequestBody$clientAuthSigninWithId;
export type ResponseContentType$clientAuthSigninWithId = keyof Response$clientAuthSigninWithId$Status$200;
export interface Params$clientAuthSigninWithId {
    requestBody: RequestBody$clientAuthSigninWithId["application/json"];
}
export type RequestContentType$clientAuthRefreshToken = keyof RequestBody$clientAuthRefreshToken;
export type ResponseContentType$clientAuthRefreshToken = keyof Response$clientAuthRefreshToken$Status$200;
export interface Params$clientAuthRefreshToken {
    requestBody: RequestBody$clientAuthRefreshToken["application/json"];
}
export type ResponseContentType$clientCustomerGetUser = keyof Response$clientCustomerGetUser$Status$200;
export type RequestContentType$clientCustomerUpdateUser = keyof RequestBody$clientCustomerUpdateUser;
export type ResponseContentType$clientCustomerUpdateUser = keyof Response$clientCustomerUpdateUser$Status$200;
export interface Params$clientCustomerUpdateUser {
    requestBody: RequestBody$clientCustomerUpdateUser["application/json"];
}
export type RequestContentType$clientCustomerCreateUser = keyof RequestBody$clientCustomerCreateUser;
export type ResponseContentType$clientCustomerCreateUser = keyof Response$clientCustomerCreateUser$Status$200;
export interface Params$clientCustomerCreateUser {
    requestBody: RequestBody$clientCustomerCreateUser["application/json"];
}
export type RequestContentType$clientCustomerPostResetPassword = keyof RequestBody$clientCustomerPostResetPassword;
export interface Params$clientCustomerPostResetPassword {
    requestBody: RequestBody$clientCustomerPostResetPassword["application/json"];
}
export type RequestContentType$clientCustomerPutChangePassword = keyof RequestBody$clientCustomerPutChangePassword;
export type ResponseContentType$clientCustomerPutChangePassword = keyof Response$clientCustomerPutChangePassword$Status$200;
export interface Params$clientCustomerPutChangePassword {
    requestBody: RequestBody$clientCustomerPutChangePassword["application/json"];
}
export type ResponseContentType$clientFileGetOneFileDetail = keyof Response$clientFileGetOneFileDetail$Status$200;
export interface Params$clientFileGetOneFileDetail {
    parameter: Parameter$clientFileGetOneFileDetail;
}
export type ResponseContentType$clientMediaGetFile = keyof Response$clientMediaGetFile$Status$200;
export interface Params$clientMediaGetFile {
    parameter: Parameter$clientMediaGetFile;
}
export type RequestContentType$clientFileUploadUpload = keyof RequestBody$clientFileUploadUpload;
export type ResponseContentType$clientFileUploadUpload = keyof Response$clientFileUploadUpload$Status$200;
export interface Params$clientFileUploadUpload {
    requestBody: RequestBody$clientFileUploadUpload["multipart/form-data"];
}
export type ResponseContentType$clientPostGetPostList = keyof Response$clientPostGetPostList$Status$200;
export interface Params$clientPostGetPostList {
    parameter: Parameter$clientPostGetPostList;
}
export type RequestContentType$clientPostPostPost = keyof RequestBody$clientPostPostPost;
export type ResponseContentType$clientPostPostPost = keyof Response$clientPostPostPost$Status$201;
export interface Params$clientPostPostPost {
    requestBody: RequestBody$clientPostPostPost["application/json"];
}
export type ResponseContentType$clientPostGetmyPostList = keyof Response$clientPostGetmyPostList$Status$200;
export interface Params$clientPostGetmyPostList {
    parameter: Parameter$clientPostGetmyPostList;
}
export type ResponseContentType$clientPostGetPost = keyof Response$clientPostGetPost$Status$200;
export interface Params$clientPostGetPost {
    parameter: Parameter$clientPostGetPost;
}
export type RequestContentType$clientPostUpdate = keyof RequestBody$clientPostUpdate;
export type ResponseContentType$clientPostUpdate = keyof Response$clientPostUpdate$Status$200;
export interface Params$clientPostUpdate {
    parameter: Parameter$clientPostUpdate;
    requestBody: RequestBody$clientPostUpdate["application/json"];
}
export interface Params$clientPostDelete {
    parameter: Parameter$clientPostDelete;
}
export type ResponseContentType$clientFavouriteGetFavouriteList = keyof Response$clientFavouriteGetFavouriteList$Status$200;
export interface Params$clientFavouriteGetFavouriteList {
    parameter: Parameter$clientFavouriteGetFavouriteList;
}
export type RequestContentType$clientFavouriteLikePost = keyof RequestBody$clientFavouriteLikePost;
export interface Params$clientFavouriteLikePost {
    parameter: Parameter$clientFavouriteLikePost;
    requestBody: RequestBody$clientFavouriteLikePost["application/json"];
}
export interface Params$clientFavouriteDeleteFav {
    parameter: Parameter$clientFavouriteDeleteFav;
}
export type ResponseContentType$clientFollowFollowList = keyof Response$clientFollowFollowList$Status$200;
export interface Params$clientFollowFollowList {
    parameter: Parameter$clientFollowFollowList;
}
export type RequestContentType$clientFollowFollowUser = keyof RequestBody$clientFollowFollowUser;
export interface Params$clientFollowFollowUser {
    parameter: Parameter$clientFollowFollowUser;
    requestBody: RequestBody$clientFollowFollowUser["application/json"];
}
export interface Params$clientFollowUnFollow {
    parameter: Parameter$clientFollowUnFollow;
}
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$clientAuthCheckSigninMethod$Status$200 | Response$clientAuthSigninWithId$Status$200 | Response$clientAuthRefreshToken$Status$200 | Response$clientCustomerGetUser$Status$200 | Response$clientCustomerUpdateUser$Status$200 | Response$clientCustomerCreateUser$Status$200 | Response$clientCustomerPutChangePassword$Status$200 | Response$clientFileGetOneFileDetail$Status$200 | Response$clientMediaGetFile$Status$200 | Response$clientFileUploadUpload$Status$200 | Response$clientPostGetPostList$Status$200 | Response$clientPostPostPost$Status$201 | Response$clientPostGetmyPostList$Status$200 | Response$clientPostGetPost$Status$200 | Response$clientPostUpdate$Status$200 | Response$clientFavouriteGetFavouriteList$Status$200 | Response$clientFollowFollowList$Status$200;
export namespace ErrorResponse {
    export type appGetHC = void;
    export type clientAuthCheckSigninMethod = void;
    export type clientAuthSigninWithId = void;
    export type clientAuthRefreshToken = void;
    export type clientCustomerGetUser = void;
    export type clientCustomerUpdateUser = void;
    export type clientCustomerCreateUser = void;
    export type clientCustomerDeleteWithdrawal = void;
    export type clientCustomerPostResetPassword = void;
    export type clientCustomerPutChangePassword = void;
    export type clientFileGetOneFileDetail = void;
    export type clientMediaGetFile = void;
    export type clientFileUploadUpload = void;
    export type clientPostGetPostList = void;
    export type clientPostPostPost = void;
    export type clientPostGetmyPostList = void;
    export type clientPostGetPost = void;
    export type clientPostUpdate = void;
    export type clientPostDelete = void;
    export type clientFavouriteGetFavouriteList = void;
    export type clientFavouriteLikePost = void;
    export type clientFavouriteDeleteFav = void;
    export type clientFollowFollowList = void;
    export type clientFollowFollowUser = void;
    export type clientFollowUnFollow = void;
    export type metricsIndex = void;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\/$/, ""); }
    public async appGetHC(option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/hc`;
        const headers = {};
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /** サインイン可能な認証方法を取得 */
    public async clientAuthCheckSigninMethod(params: Params$clientAuthCheckSigninMethod, option?: RequestOption): Promise<Response$clientAuthCheckSigninMethod$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/auth/check`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /** パスワードでサインイン */
    public async clientAuthSigninWithId(params: Params$clientAuthSigninWithId, option?: RequestOption): Promise<Response$clientAuthSigninWithId$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/auth/signin/password`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /** リフレッシュトークンからアクセストークンを再生成 */
    public async clientAuthRefreshToken(params: Params$clientAuthRefreshToken, option?: RequestOption): Promise<Response$clientAuthRefreshToken$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/auth/refresh`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /** ユーザー情報取得 */
    public async clientCustomerGetUser(option?: RequestOption): Promise<Response$clientCustomerGetUser$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/customer`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /** ユーザー情報更新 */
    public async clientCustomerUpdateUser(params: Params$clientCustomerUpdateUser, option?: RequestOption): Promise<Response$clientCustomerUpdateUser$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/customer`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /** ユーザー情報作成 */
    public async clientCustomerCreateUser(params: Params$clientCustomerCreateUser, option?: RequestOption): Promise<Response$clientCustomerCreateUser$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/customer`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /** 退会 */
    public async clientCustomerDeleteWithdrawal(option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/client/customer`;
        const headers = {};
        return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
    }
    /** パスワードリセット コード確認&パスワード変更 */
    public async clientCustomerPostResetPassword(params: Params$clientCustomerPostResetPassword, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/client/customer/resetPassword`;
        const headers = {
            "Content-Type": "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /** パスワード変更 */
    public async clientCustomerPutChangePassword(params: Params$clientCustomerPutChangePassword, option?: RequestOption): Promise<Response$clientCustomerPutChangePassword$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/customer/changePassword`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /** ファイル情報取得 */
    public async clientFileGetOneFileDetail(params: Params$clientFileGetOneFileDetail, option?: RequestOption): Promise<Response$clientFileGetOneFileDetail$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/file/${params.parameter.uuid}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /** ファイルを取得 */
    public async clientMediaGetFile(params: Params$clientMediaGetFile, option?: RequestOption): Promise<Response$clientMediaGetFile$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/media/{_}/{_}/${params.parameter.fileName}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /** ファイルアップロード */
    public async clientFileUploadUpload(params: Params$clientFileUploadUpload, option?: RequestOption): Promise<Response$clientFileUploadUpload$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/upload`;
        const headers = {
            "Content-Type": "multipart/form-data",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /** 投稿一覧取得 */
    public async clientPostGetPostList(params: Params$clientPostGetPostList, option?: RequestOption): Promise<Response$clientPostGetPostList$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/post`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            limit: { value: params.parameter.limit, explode: false },
            page: { value: params.parameter.page, explode: false },
            customerUuid: { value: params.parameter.customerUuid, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /** 新規投稿 */
    public async clientPostPostPost(params: Params$clientPostPostPost, option?: RequestOption): Promise<Response$clientPostPostPost$Status$201["application/json"]> {
        const url = this.baseUrl + `/api/client/post`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /** all my post */
    public async clientPostGetmyPostList(params: Params$clientPostGetmyPostList, option?: RequestOption): Promise<Response$clientPostGetmyPostList$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/post/my post`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            customerUuid: { value: params.parameter.customerUuid, explode: false },
            limit: { value: params.parameter.limit, explode: false },
            page: { value: params.parameter.page, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /** 投稿詳細取得 */
    public async clientPostGetPost(params: Params$clientPostGetPost, option?: RequestOption): Promise<Response$clientPostGetPost$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/post/{uuid}`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /** 編集 - edit the post */
    public async clientPostUpdate(params: Params$clientPostUpdate, option?: RequestOption): Promise<Response$clientPostUpdate$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/post/${params.parameter.postUuid}`;
        const headers = {
            "Content-Type": "application/json",
            Accept: "application/json"
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /** 退会 */
    public async clientPostDelete(params: Params$clientPostDelete, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/client/post/${params.parameter.postUuid}`;
        const headers = {};
        return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
    }
    /** お気に入りリスト */
    public async clientFavouriteGetFavouriteList(params: Params$clientFavouriteGetFavouriteList, option?: RequestOption): Promise<Response$clientFavouriteGetFavouriteList$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/favourite`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            customerUuid: { value: params.parameter.customerUuid, explode: false },
            limit: { value: params.parameter.limit, explode: false },
            page: { value: params.parameter.page, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /** ライクポスト */
    public async clientFavouriteLikePost(params: Params$clientFavouriteLikePost, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/client/favourite`;
        const headers = {
            "Content-Type": "application/json"
        };
        const queryParameters: QueryParameters = {
            postUuid: { value: params.parameter.postUuid, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /** デリートフェイバリット */
    public async clientFavouriteDeleteFav(params: Params$clientFavouriteDeleteFav, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/client/favourite`;
        const headers = {};
        const queryParameters: QueryParameters = {
            postUuid: { value: params.parameter.postUuid, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /** フォロイング リスト(list of following)  */
    public async clientFollowFollowList(params: Params$clientFollowFollowList, option?: RequestOption): Promise<Response$clientFollowFollowList$Status$200["application/json"]> {
        const url = this.baseUrl + `/api/client/follow`;
        const headers = {
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            userUuid: { value: params.parameter.userUuid, explode: false },
            limit: { value: params.parameter.limit, explode: false },
            page: { value: params.parameter.page, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /** フォロワ(start following) */
    public async clientFollowFollowUser(params: Params$clientFollowFollowUser, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/client/follow`;
        const headers = {
            "Content-Type": "application/json"
        };
        const queryParameters: QueryParameters = {
            userUuid: { value: params.parameter.userUuid, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /** アンフォロー(UnFollow) */
    public async clientFollowUnFollow(params: Params$clientFollowUnFollow, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/client/follow`;
        const headers = {};
        const queryParameters: QueryParameters = {
            userUuid: { value: params.parameter.userUuid, explode: false }
        };
        return this.apiClient.request("DELETE", url, headers, undefined, queryParameters, option);
    }
    /** Prometheusのメトリクスを取得 */
    public async metricsIndex(option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/api/metrics`;
        const headers = {};
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
}
